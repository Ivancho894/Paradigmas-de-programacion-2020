Object subclass: #Apuesta	instanceVariableNames: 'nroApuesta fechaHora monto dniApostador'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Apuesta methodsFor: 'initialization'!initialize	super initialize.	dniApostador := nil.	fechaHora := nil.	monto := 0.	nroApuesta := nil.! !!Apuesta methodsFor: 'accessing'!dniApostador	^ dniApostador! !!Apuesta methodsFor: 'accessing'!dniApostador: anObject	dniApostador := anObject! !!Apuesta methodsFor: 'accessing'!fechaHora: anObject	fechaHora := anObject! !!Apuesta methodsFor: 'accessing'!nroApuesta: anObject	nroApuesta := anObject! !!Apuesta methodsFor: 'accessing'!fechaHora	^ fechaHora! !!Apuesta methodsFor: 'accessing'!monto: anObject	monto := anObject! !!Apuesta methodsFor: 'accessing'!monto	^ monto! !!Apuesta methodsFor: 'accessing'!nroApuesta	^ nroApuesta! !!Apuesta methodsFor: 'propios'!asString			^String cr,			'Numero apuesta: ', nroApuesta asString, String cr,			'Dni del apostador: ', dniApostador asString, String cr,			'Fecha: ', fechaHora asString , String cr,			'Monto de dinero apostado: $', monto asString ,String cr.! !Object subclass: #Caballo	instanceVariableNames: 'nombre jinete'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Caballo methodsFor: 'accessing'!nombre: unnombre	nombre := unnombre ! !!Caballo methodsFor: 'accessing'!nombre	^ nombre! !!Caballo methodsFor: 'accessing'!jinete	^ jinete! !!Caballo methodsFor: 'accessing'!jinete: elnombre	jinete := elnombre ! !!Caballo methodsFor: 'initialization'!initialize	super initialize.	jinete := nil.	nombre := nil.! !!Caballo methodsFor: 'propios'!asString"devuelve una cadena con la descripción completa del caballo."| aux |		aux := String cr,'Nombre: ',nombre asString,String cr,	       'Jinete: ',jinete asString,String cr. 	^ aux! !Object subclass: #Carrera	instanceVariableNames: 'id fecha tipo competidores apuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Carrera methodsFor: 'accessing'!competidores	^ competidores! !!Carrera methodsFor: 'accessing'!apuestas: anObject	apuestas := anObject! !!Carrera methodsFor: 'accessing'!tipo: anObject	tipo := anObject! !!Carrera methodsFor: 'accessing'!tipo	^ tipo! !!Carrera methodsFor: 'accessing'!apuestas	^ apuestas! !!Carrera methodsFor: 'accessing'!competidores: anObject	competidores := anObject! !!Carrera methodsFor: 'accessing'!id	^ id! !!Carrera methodsFor: 'accessing'!fecha	^ fecha! !!Carrera methodsFor: 'accessing'!id: anObject	id := anObject! !!Carrera methodsFor: 'accessing'!fecha: anObject	fecha := anObject! !!Carrera methodsFor: 'propios'!Registrarapuestasimple_Numero: nro Fecha: lafecha Monto: elmonto Dni: eldni Caballo_Nombre: Nom|apu elcaba|elcaba:= self competidores detect:[:x| x caballo nombre == Nom ] .apu:= Simple new.apu nroApuesta: nro.apu fechaHora: lafecha.apu monto: elmonto.apu dniApostador: eldni.apu caballo: elcaba caballo.apuestas add: apu.! !!Carrera methodsFor: 'propios'!RegistrarapuestaTriple_Numero: nro Fecha: lafecha Monto: elmonto Dni: eldni Caballouno_Nom: uno Caballodos_Nom: dos Caballotres_Nom:tres|apu Primero Segundo Tercero|Primero:=self competidores detect: [ :x|x caballo nombre == uno ].Segundo:=self competidores detect: [ :x|x caballo nombre == dos ].Tercero:=self competidores detect: [ :x|x caballo nombre == tres ].apu:= Tres new.apu nroApuesta: nro.apu fechaHora: lafecha.apu monto: elmonto.apu dniApostador: eldni.apu agrearcaballos_primero: Primero segundo: Segundo tercero: Tercero.apuestas add: apu.! !!Carrera methodsFor: 'propios'!Agregarcaballo_nombre:Nom jinete: jinete |Ins Hay Caba|Hay:= self competidores select: [:x | x caballo nombre == Nom].(Hay size == 0) 	ifTrue: [  		(self competidores size <10 )			ifTrue: 				[ Ins:=Inscripcion new.Caba:= Caballo new. Ins Asignarcaballo: Caba.Caba nombre: Nom.Caba jinete: jinete.competidores add:Ins. ]].! !!Carrera methodsFor: 'propios'!registrarpuesto: Nom puesto: elpuesto|Lis|Lis:=competidores select: [ :x | x caballo nombre == Nom  ].Lis first Actualizarpuesto: elpuesto.! !!Carrera methodsFor: 'propios'!apuestastres: Desde Y: Hasta|Lis Devuelvo|Lis:=self apuestas select: [ :x| (x isKindOf: Tres) & (x monto < Hasta) & (x monto > Desde) ].Devuelvo :='Caballos con apuestas triples desde: ',Desde asString, ' hasta: ',Hasta asString.Lis do:[:x| Devuelvo:=Devuelvo,x asString.].^Devuelvo .! !!Carrera methodsFor: 'propios'!Conocer_la_apuesta_mayor|Apu|Apu:=apuestas first.self apuestas do:[:x|(x monto > Apu monto )ifTrue: [Apu:=x]].^'La apuesta mayor es: ',Apu asString.! !!Carrera methodsFor: 'propios'!Mostrar_cuanto_paga_apuesta_numero: num|Paga devuelvo Apu|devuelvo:='La apuesta realizada no es la ganadora'.Apu:=self apuestas detect: [:x|x nroApuesta == num ].Paga:=Apu Cuantopaga:self competidores.(self tipo == 1)ifTrue: [ (Paga>1000)ifTrue: [ Paga:=1000 ] ] ifFalse: [Paga:=Paga-(Paga*0.05)].(Paga ~=0)ifTrue: [devuelvo:='La apuesta ',Apu nroApuesta asString ,' es la ganadora, el premio es de: ',Paga asString,String cr ].^devuelvo ! !!Carrera methodsFor: 'propios'!Mostrar_resultados|col lis|col:=competidores.col sortBlock: [ :a :b | a <= b ].lis:='Listado ordenado por puestos de Caballos: ',String cr.col do:[ :x| (x puesto == 0)ifFalse: [ lis:=lis,String cr,'Nombre del Caballo: ',x caballo nombre asString ,' Puesto: ',x puesto asString. ] ].^lis,String cr.! !!Carrera methodsFor: 'propios'!asString|Compe Apue elTipo Totcaba Totapu|Compe:=''.Apue:=''.Totcaba:=self competidores size.Totapu:=self apuestas size.elTipo:='Normal'.(tipo==2)ifTrue: [ elTipo:='Gran Premio' ].self competidores do:[:x|Compe:=Compe,x caballo asString.].self apuestas do:[:x|Apue:=Apue,x asString,String cr.].^String cr,'Carrera id: ',id asString,String cr,'tipo ',elTipo asString,String cr,'Competidores: ', Compe asString,String cr,'Apuestas:',String cr,Apue asString,String cr,'Total de competidores: ',Totcaba asString,String cr,'Total de Apuestas: ',Totapu asString.  ! !!Carrera methodsFor: 'initialization'!initialize	super initialize.	apuestas := OrderedCollection new.	competidores := SortedCollection new.	fecha := nil.	id := nil.	tipo := nil.	! !Object subclass: #Inscripcion	instanceVariableNames: 'caballo puesto'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Inscripcion methodsFor: 'propios'!<= insc^(self puesto <= insc puesto)! !!Inscripcion methodsFor: 'propios'!Actualizarpuesto: ppuesto:=p! !!Inscripcion methodsFor: 'propios'!asString^self caballo nombre asString,', Saco el puesto: ',self puesto asString.! !!Inscripcion methodsFor: 'propios'!Asignarcaballo: Cabacaballo := Caba  ! !!Inscripcion methodsFor: 'accessing'!puesto: anObject	puesto := anObject! !!Inscripcion methodsFor: 'accessing'!caballo: anObject	caballo := anObject! !!Inscripcion methodsFor: 'accessing'!puesto	^ puesto! !!Inscripcion methodsFor: 'accessing'!caballo	^ caballo! !!Inscripcion methodsFor: 'initialization'!initialize	super initialize.	caballo := nil.	puesto := 0.! !Apuesta subclass: #Simple	instanceVariableNames: 'caballo'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Simple methodsFor: 'propios'!asString^super asString,'El caballo apostado es: ',caballo asString. ! !!Simple methodsFor: 'propios'!Cuantopaga: Loscompe|Inscr paga|paga:=0.Inscr:=Loscompe detect: [ :x| x caballo  == self caballo].(Inscr puesto == 1 )ifTrue:[paga:=(super monto)*2].^paga! !!Simple methodsFor: 'accessing'!caballo: anObject	caballo := anObject! !!Simple methodsFor: 'accessing'!caballo	^ caballo! !!Simple methodsFor: 'initialization'!initialize	super initialize.	caballo := nil. ! !Apuesta subclass: #Tres	instanceVariableNames: 'caballos'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Tres methodsFor: 'initialization'!initialize	super initialize.	caballos := Array new: 3. ! !!Tres methodsFor: 'accessing'!caballos	^ caballos! !!Tres methodsFor: 'accessing'!caballos: anObject	caballos := anObject! !!Tres methodsFor: 'propios'!asString^super asString,'Caballo apostado a que salia primero: ',(caballos at: 1) asString,String cr,'Caballo apostado a que salia segundo: ',(caballos at: 2) asString,String cr,'Caballo apostado a que salia tercero: ',(caballos at: 3) asString.! !!Tres methodsFor: 'propios'!agrearcaballos_primero: uno segundo: dos tercero: trescaballos at: 1 put: uno. caballos at: 2 put: dos.caballos at: 3 put: tres.! !!Tres methodsFor: 'propios'!Cuantopaga: Loscompe|Paga Lostres Primero Segundo Tercero|Primero:=caballos at: 1.Segundo:=caballos at: 2.Tercero:=caballos at: 3.Lostres:=0.Paga:=0.Loscompe do: [ :x| ((x puesto == 1) & (x caballo == Primero ))ifTrue: [ Lostres:=1 ] ].Loscompe do: [ :x|( (x puesto == 2) & (x caballo == Segundo ))ifTrue: [ Lostres:=Lostres +1] ].Loscompe do: [ :x|( (x puesto == 3) & (x caballo == Tercero ))ifTrue: [Lostres:=Lostres +1]].(Lostres == 3)ifTrue: [ Paga:=self monto*6 ].^Paga   ! !