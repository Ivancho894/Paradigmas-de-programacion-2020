Object subclass: #Apuesta	instanceVariableNames: 'nroApuesta fechaHora monto dniApostador'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Apuesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	dniApostador:		<Object>	fechaHora:		<Object>	monto:		<Object>	nroApuesta:		<Object>    Implementation Points!!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!nroApuesta	^ nroApuesta! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!monto	^ monto! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!dniApostador: anObject	dniApostador := anObject! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!fechaHora: anObject	fechaHora := anObject! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!nroApuesta: anObject	nroApuesta := anObject! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!fechaHora	^ fechaHora! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!monto: anObject	monto := anObject! !!Apuesta methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:55'!dniApostador	^ dniApostador! !!Apuesta methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 14:09'!asString			^String cr,			'Numero apuesta: ', nroApuesta asString, String cr,			'Dni del apostador: ', dniApostador asString, String cr,			'Fecha: ', fechaHora asString , String cr,			'Monto de dinero apostado: $', monto asString ,String cr.! !!Apuesta methodsFor: 'initialization' stamp: 'IvanSerralta 6/16/2020 19:41'!initialize	super initialize.	dniApostador := nil.	fechaHora := nil.	monto := 0.	nroApuesta := nil.! !Object subclass: #Caballo	instanceVariableNames: 'nombre jinete'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Caballo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	Jinete:		<Object>	Nombre:		<Object>    Implementation Points!!Caballo methodsFor: 'initialization' stamp: 'IvanSerralta 6/16/2020 17:34'!initialize	super initialize.	jinete := nil.	nombre := nil.! !!Caballo methodsFor: 'propios' stamp: 'IvanSerralta 6/16/2020 15:41'!asString"devuelve una cadena con la descripción completa del caballo."| aux |		aux := String cr,'Nombre: ',nombre asString,String cr,	       'Jinete: ',jinete asString,String cr. 	^ aux! !!Caballo methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:42'!jinete: elnombre	jinete := elnombre ! !!Caballo methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:43'!nombre: unnombre	nombre := unnombre ! !!Caballo methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:41'!nombre	^ nombre! !!Caballo methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:41'!jinete	^ jinete! !Object subclass: #Carrera	instanceVariableNames: 'id fecha tipo competidores apuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Carrera commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apuestas:		<Object>	competidores:		<Object>	fecha:		<Object>	id:		<Object>	tipo:		<Object>    Implementation Points!!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!tipo: anObject	tipo := anObject! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!fecha: anObject	fecha := anObject! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!tipo	^ tipo! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!fecha	^ fecha! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!competidores	^ competidores! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!competidores: anObject	competidores := anObject! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!id	^ id! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!id: anObject	id := anObject! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!apuestas	^ apuestas! !!Carrera methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:51'!apuestas: anObject	apuestas := anObject! !!Carrera methodsFor: 'initialization' stamp: 'IvanSerralta 6/17/2020 00:03'!initialize	super initialize.	apuestas := SortedCollection new.	competidores := SortedCollection new.	fecha := nil.	id := nil.	tipo := nil.	! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:33'!Conocer_la_apuesta_mayorself apuestas sortBlock: [ :a :b | a monto > b monto ].^'La apuesta mayor es: ',self apuestas first asString.! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:22'!Agregarcaballo_nombre:Nom jinete: jinete |Ins Hay Caba|Hay:= self competidores select: [:x | x caballo nombre == Nom].(Hay size == 0) 	ifTrue: [  		(self competidores size <10 )			ifTrue: 				[ Ins:=Inscripcion new.Caba:= Caballo new. Ins Asignarcaballo: Caba.Caba nombre: Nom.Caba jinete: jinete.competidores add:Ins. ]].! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:43'!Mostrar_cuanto_paga_apuesta_numero: num|Paga devuelvo Apu|devuelvo:='La apuesta realizada no es la ganadora'.Apu:=self apuestas detect: [:x|x nroApuesta == num ].Paga:=Apu Cuantopaga:self competidores.(self tipo == 1)ifTrue: [ (Paga>1000)ifTrue: [ Paga:=1000 ] ] ifFalse: [Paga:=Paga-(Paga*0.05)].(Paga ~=0)ifTrue: [devuelvo:='La apuesta es la ganadora, el premio es de: ',Paga asString  ].^devuelvo ! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:45'!Registrarapuestasimple_Numero: nro Fecha: lafecha Monto: elmonto Dni: eldni Caballo_Nombre: Nom|apu elcaba|elcaba:= self competidores detect:[:x| x caballo nombre == Nom ] .apu:= Simple new.apu nroApuesta: nro.apu fechaHora: lafecha.apu monto: elmonto.apu dniApostador: eldni.apu caballo: elcaba caballo.apuestas add: apu.! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 14:02'!asString|Compe Apue elTipo Totcaba Totapu|Compe:=''.Apue:=''.Totcaba:=self competidores size.Totapu:=self apuestas size.elTipo:='Normal'.(tipo==2)ifTrue: [ elTipo:='Gran Premio' ].self competidores do:[:x|Compe:=Compe,x caballo asString.].self apuestas do:[:x|Apue:=Apue,x asString,String cr.].^'Id: ',id asString,String cr,'tipo ',elTipo asString,String cr,'Competidores: ',String cr, Compe asString,'Apuestas:',String cr,Apue asString,String cr,'Total de competidores: ',Totcaba asString,String cr,'Total de Apuestas: ',Totapu asString.  ! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 12:49'!apuestastres: Desde Y: Hasta|Lis Devuelvo|Lis:=self apuestas select: [ :x| (x isKindOf: Tres) & (x monto < Hasta) & (x monto > Desde) ].Devuelvo :='Caballos con apuestas triples desde: ',Desde asString, ' hasta: ',Hasta asString.Lis do:[:x| Devuelvo:=Devuelvo,x asString.].^Devuelvo .! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:43'!RegistrarapuestaTriple_Numero: nro Fecha: lafecha Monto: elmonto Dni: eldni Caballouno_Nom: uno Caballodos_Nom: dos Caballotres_Nom:tres|apu Primero Segundo Tercero|Primero:=self competidores detect: [ :x|x caballo nombre == uno ].Segundo:=self competidores detect: [ :x|x caballo nombre == dos ].Tercero:=self competidores detect: [ :x|x caballo nombre == tres ].apu:= Tres new.apu nroApuesta: nro.apu fechaHora: lafecha.apu monto: elmonto.apu dniApostador: eldni.apu agrearcaballos_primero: Primero segundo: Segundo tercero: Tercero.apuestas add: apu.! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 14:11'!Mostrar_resultados|col lis|col:=competidores.col sortBlock: [ :a :b | a <= b ].lis:='Listado ordenado por puestos de Caballos: ',String cr.col do:[ :x| (x puesto == 0)ifFalse: [ lis:=lis,String cr,'Nombre del Caballo: ',x caballo nombre asString ,' Puesto: ',x puesto asString. ] ].^lis! !!Carrera methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:10'!registrarpuesto: Nom puesto: elpuesto|Lis|Lis:=competidores select: [ :x | x caballo nombre == Nom  ].Lis first Actualizarpuesto: elpuesto.! !Object subclass: #Inscripcion	instanceVariableNames: 'caballo puesto'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Inscripcion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	caballo:		<Object>	puesto:		<Object>    Implementation Points!!Inscripcion methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 11:59'!<= insc^(self puesto <= insc puesto)! !!Inscripcion methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 12:03'!Actualizarpuesto: ppuesto:=p! !!Inscripcion methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 14:14'!asString^self caballo nombre asString,', Saco el puesto: ',self puesto asString.! !!Inscripcion methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 11:56'!Asignarcaballo: Cabacaballo := Caba ! !!Inscripcion methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:57'!puesto: anObject	puesto := anObject! !!Inscripcion methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:57'!puesto	^ puesto! !!Inscripcion methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:57'!caballo	^ caballo! !!Inscripcion methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:57'!caballo: anObject	caballo := anObject! !!Inscripcion methodsFor: 'initialization' stamp: 'IvanSerralta 6/16/2020 16:04'!initialize	super initialize.	caballo := nil.	puesto := 0.! !Apuesta subclass: #Simple	instanceVariableNames: 'caballo'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Simple commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	caballo:		<Object>    Implementation Points!!Simple methodsFor: 'initialization' stamp: 'IvanSerralta 6/16/2020 15:56'!initialize	super initialize.	caballo := nil.! !!Simple methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 13:37'!Cuantopaga: Loscompe|Inscr paga|paga:=0.Inscr:=Loscompe detect: [ :x| x caballo  == self caballo].(Inscr puesto == 1 )ifTrue:[paga:=(super monto)*2].^paga! !!Simple methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 00:06'!asString^super asString, String cr,'El caballo apostado es: ',caballo asString.! !!Simple methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:56'!caballo	^ caballo! !!Simple methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:56'!caballo: anObject	caballo := anObject! !Apuesta subclass: #Tres	instanceVariableNames: 'caballos'	classVariableNames: ''	poolDictionaries: ''	category: 'Hipodromo de Cordoba'!!Tres commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	caballos:		<Object>    Implementation Points!!Tres methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:57'!caballos	^ caballos! !!Tres methodsFor: 'accessing' stamp: 'IvanSerralta 6/16/2020 15:57'!caballos: anObject	caballos := anObject! !!Tres methodsFor: 'initialization' stamp: 'IvanSerralta 6/16/2020 19:01'!initialize	super initialize.	caballos := Array new: 3.! !!Tres methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 00:41'!Cuantopaga: Loscompe|Paga Lostres Primero Segundo Tercero|Primero:=caballos at: 1.Segundo:=caballos at: 2.Tercero:=caballos at: 3.Lostres:=0.Paga:=0.Loscompe do: [ :x| ((x puesto == 1) & (x caballo == Primero ))ifTrue: [ Lostres:=1 ] ].Loscompe do: [ :x|( (x puesto == 2) & (x caballo == Segundo ))ifTrue: [ Lostres:=Lostres +1] ].Loscompe do: [ :x|( (x puesto == 3) & (x caballo == Tercero ))ifTrue: [Lostres:=Lostres +1]].(Lostres == 3)ifTrue: [ Paga:=self monto*6 ].^Paga   ! !!Tres methodsFor: 'propios' stamp: 'IvanSerralta 6/16/2020 19:02'!agrearcaballos_primero: uno segundo: dos tercero: trescaballos at: 1 put: uno. caballos at: 2 put: dos.caballos at: 3 put: tres.! !!Tres methodsFor: 'propios' stamp: 'IvanSerralta 6/17/2020 12:38'!asString^super asString,String cr,'Caballo apostado a que salia primero: ',(caballos at: 1) asString,String cr,'Caballo apostado a que salia segundo: ',(caballos at: 2) asString,String cr,'Caballo apostado a que salia tercero: ',(caballos at: 3) asString.! !